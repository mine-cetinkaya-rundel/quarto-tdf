# Setting options with YAML {#sec-yaml}


* How do I set options?
* How should I nest options?
* Where can I put options?

## General YAML syntax

`key: value`

Indentation matters, adds heirachy

Arrays `[` syntax and `-` syntax

Options for long strings: `>`, `|`

When to use quotes.

You'll start by diving into the details of setting YAML options in the document header.

`default`

## Where do options go?

By now you've seen Quarto options set using YAML syntax in a number of places:

-   in the project configuration file `_quarto.yml`
-   in the document header, i.e. between the `---` at the top of a Quarto document
-   in code cells, on lines prefaced by `#|`

You'll start by learning more 

You'll start by learning more about options set in the document header.

## Document Options



Useful principles:

-   Everything is a format option
-   Top-level options are applied to all formats
-   Options in `_quarto.yml` apply to all documents

## Everything is a format option

Consider the following document header:

``` yaml
---
title: My document
toc: true
format: html
---
```

From Quarto's perspective, this is equivalent to the header:

``` yaml
---
format:
  html:
    title: My document
    toc: true
---
```

That is, the options `title` and `toc` are HTML format options.
It's convenient to be able to put things at the top-level, but internally, Quarto will move those options under each format.
This is why Quarto's [reference pages](https://quarto.org/docs/reference/) are laid out by format---options are supported, or not, depending on the output format.

::: callout-note
## OK, not quite everything...

`engine` is an option that isn't applied at a format level---you cannot specify different engines for different formats.
:::

## Top-level options are applied to all formats

Quarto assumes any options you specify at the top-level should be applied to all formats.
For example, if we extend our document header to add the `pdf` format:

``` yaml
---
title: My document
toc: true
format: 
  html: default
  pdf: default
---
```

Quarto interprets this as:

``` yaml
format:
  html:
    title: My document
    toc: true
  pdf: 
    title: My document
    toc: true
```

This is a good example of why this behavior exists---you'll want many options to be the same across formats, and being able to specify them at the top-level saves a lot of typing.

Option values nested under a format will override any specified at the top level.
For example, you might want `toc: true` for most formats, but override it for `revealjs`:

``` yaml
---
title: My document
toc: true
format: 
  html: default
  pdf: default
  revealjs:
    toc: false
---
```

There are a couple of consequences of this behavior to be aware of:

-   Options are silently ignored by formats that don't support them.
    While this is true regardless of where you set the option, it can be harder to remember when you set options at the top-level.
    For example, you can set `cold-fold: true` at the top-level, and it will work great for `format: html`, but it isn't supported by `format: pdf`.

-   YAML completion will suggest options at the top-level that are supported by at least one format, but that might not be the format you targeting.
    For example, the completion `fig-pos` is suggested at the top-level, but it only applies to `format: pdf`.

Both are reminders that understanding whether an option is supported by a format is up to you, and the best way to check is on the Quarto reference pages for the formats you are targeting.

## Options in `_quarto.yml` apply to all documents

You can move any options you've set in the document header to `_quarto.yml` and they'll apply to all documents in your project.

For example, if you want all documents in the project to have a table of contents you could include `toc: true` in your `_quarto.yml` file:

``` {.yaml filename="_quarto.yml"}
toc: true
```

::: callout-note
## `engine` is the exception again

You can't set `engine` at the project level by putting it in `_quarto.yml`.
:::

Options specified in `_quarto.yml` follow the same principles as those in the document header.
By specifying `toc: true` at the top-level it will apply to all formats.
Alternatively, you could specify it for a specific format, e.g. `pdf`, by nesting it under the format:

``` {.yaml filename="_quarto.yml"}
format: 
  pdf:
    toc: true
```

As discussed in @sec-common-metadata you can override any options in `_quarto.yml` at a document-level by setting them in the document header.

However, if you specify any formats via `format` in a document header, 
only those specified will be rendered, regardless of which formats are specified in `_quarto.yml`.
This gets a little tricky, so let's look at a couple of examples.
Consider @lst-project-opts: a `_quarto.yml` that sets one top-level option, `toc`, for all formats, an `html` option `code-fold`, and specifies default options for the `pdf` format.

::: {#lst-project-opts}

``` {.yaml filename="_quarto.yml"}
toc: true
format: 
  html:
    code-fold: true
  pdf: default
```

An example of project level options
:::

For any document in the project, that would be equivalent to setting the following in the document header:

``` yaml
---
format:
  html:
    toc: true
    code-fold: true
  pdf:
    toc: true
---
```

The result of `quarto render` would be an HTML document (with a table of contents and using code fold), **and** a PDF document (with a table of contents).

When a document sets a format via `format` either with no options (@lst-format-no-opts) or as the result of setting an option nested under the format (@lst-format-opts),
only the options for that format are merged from `_quarto.yml` (@lst-format-result-no-opts and @lst-format-result-opts respectively).
The result of `quarto render` on @lst-format-no-opts and @lst-format-opts is only an HTML document.

::: {#lst-format}

::: {#lst-format-no-opts}
``` yaml
---
format: html
---
```

`format: html` set with no other options.
:::

::: {#lst-format-opts}

``` yaml
---
format: 
  html:
    toc: false
---
```

`format: html` set with additional options.

:::

A document that sets a format in the document header

::: 


:::: {#lst-format-result}

::: {#lst-format-result-no-opts}
``` yaml
---
format: 
  html:
    toc: true
    code-fold: true
---
```
:::

::: {#lst-format-result-opts}
``` yaml
---
format: 
  html:
    toc: false
    code-fold: true
---
```
:::

The equivalent header for the files in @lst-format when merged with the settings in `_quarto.yml`.

:::: 

If you want to specify some format specific options in a document,
but maintain the full list of target formats from `_quarto.yml`, 
specify all formats in the document header.
For example, to override some HTML options, 
but use the PDF options from `_quarto.yml`, add `pdf: default` to the list of formats:

```{.yaml}
---
format: 
  html:
    toc: false
  pdf: default
---
```

## Command line metadata

Command line metadata overrides metadata set in files:

```{.bash filename="Terminal"}
quarto render document.qmd -M toc:false
```

Careful: not really YAML because there is no space after `:`. Also can't set options that need sub-elements.

## `_metadata.yml`

In this chapter you'll also learn about one new place you can set options, `_metadata.yml`.

## Execution options

We use the term **execution options** to describe options you can set in code cells.

General principles:

* Execution options set in code cells apply only to the code cell
* Execution options set in the document header apply to all code cells in the document
* Execution options set in `_quarto.yml` apply to all code cells in the project

### Execution options set in code cells

Documented by engine https://quarto.org/docs/reference/cells/

Many set things that should be unique to a code cell  e.g. `label`/`lst-label`, `fig-cap`/`tbl-cap`/`lst-cap`, `fig-alt`, `fig-subcap`/`tbl-subcap`, `fig-link`, `layout`/`layout-ncol`/`layout-nrow`


### Execution options set in the document header 

Doesn't apply to code cell options that are unique to code cells, e.g. `label`, `fig-cap`, `fig-alt`.

`fig-width` and `fig-height` are special cases. 

### Execution options set in `_quarto.yml`

