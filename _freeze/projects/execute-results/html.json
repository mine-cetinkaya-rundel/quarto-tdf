{
  "hash": "c10169079ea08ba6ba8938eb5916ccb8",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute:\n  echo: false\n\n---\n\n\n\n\n\n# Projects {#sec-projects}\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\nSo far, we've concentrated on single Quarto documents: a single `.qmd` which defines all of its Quarto options in its header.\nIn this chapter, you'll learn about Quarto projects: a way to organize collections of Quarto documents.\nYou learn\n\n-   what a Quarto project is\n-   how to create one, or turn an existing folder into one\n-   how working with a project differs to working with single files\n-   how to render all or part of a Quarto project\n-   how to set project level Quarto settings\n-   how to specify common metadata for documents in the project\n-   how to share content across documents in a project\n\n## What is a Quarto Project? {#sec-overview}\n\nFrom a technical perspective, a Quarto project is simply a folder that contains the file `_quarto.yml`.\nFrom a practical perspective, using a Quarto project has two benefits:\n\n1.  You can easily render all the Quarto documents in the project folder.\n2.  You can set options common to the documents in a single place.\n\nConsider the folder `ds-project`, a simple example of a data science project, that contains some Quarto documents:\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\ntemp-dirs/ds-project\n├── 01-import.qmd\n├── 02-visualize.qmd\n├── README.md\n└── data\n    └── records.csv\n```\n\n\n:::\n:::\n\n\n\n\n\nTo turn this folder into a Quarto project, add the file `_quarto.yml`:\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\ntemp-dirs/ds-project\n├── 01-import.qmd\n├── 02-visualize.qmd\n├── README.md\n├── _quarto.yml\n└── data\n    └── records.csv\n```\n\n\n:::\n:::\n\n\n\n\n\nThe presence of `_quarto.yml`, even if empty, signals to Quarto this is a project, and allows you to render without specifying a file:\n\n``` {.bash filename=\"Terminal\"}\nquarto render \n```\n\nQuarto will then render all Quarto documents in the project.\nIn this example, the files, `01-import.html` and `02-visualize.html`, and their supporting folders, `01-import_files/` and `02-visualize_files/` are created:\n\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\ntemp-dirs/ds-project\n├── 01-import.html\n├── 01-import.qmd\n├── 01-import_files\n│   └── libs\n├── 02-visualize.html\n├── 02-visualize.qmd\n├── 02-visualize_files\n│   └── libs\n├── README.md\n├── _quarto.yml\n└── data\n    └── records.csv\n```\n\n\n:::\n:::\n\n\n\n\n\nYou'll learn more about previewing and rendering projects in @sec-render-a-project.\n\nBeyond indicating that the folder is a Quarto project, the file `_quarto.yml` also stores Quarto YAML options.\nThese can be project-level options or document-level options common to the documents in the project. \nProject-level options are set under `project`, one of which is `type`. \nIf the file `_quarto.yml` is empty, or if `type` is unspecified, the `type` is assumed to be `default`, i.e. it's equivalent to:\n\n``` {.yaml filename=\"_quarto.yml\"}\nproject:\n  type: default\n```\n\nOther project types include `manuscript`, `website` and `book`, which you'll learn more about in @sec-manuscripts, @sec-websites and @sec-books.\n\nYou'll learn about a few more project-level options in @sec-project-options and about setting common document options in @sec-common-metadata.\n\n::: {.callout-tip}\n\n## RStudio Projects\n\nThe file that identifies a folder as a Quarto project, `_quarto.yml`, is distinct from the file that identifies a folder as an RStudio project, `folder_name.Rproj`. \nHowever, in practice the concept of what makes a folder a \"project\" is the same, and folders are often both a Quarto project and RStudio project, and include both files.\n\n:::\n\n## Create a Project\n\nYou've already seen how you can create a project in an exisiting directory by adding the file `_quarto.yml`. \nYou can also create a project in a new directory using the `quarto create` command:\n\n``` {.bash filename=\"Terminal\"}\nquarto create project\n```\n\nQuarto will give you an interactive prompt asking for the project type, directory name and project title. \nYou can also specify these directly to the command:\n\n``` {.bash filename=\"Terminal\"}\nquarto create project default project-name project-title\n```\n\nQuarto will then create the folder, e.g. `project-name` and populate it with `_quarto.yml` and a Quarto document with the same name as the project title, `project-title.qmd`:\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\ntemp-dirs/project-name\n├── _quarto.yml\n└── project-title.qmd\n```\n\n\n:::\n:::\n\n\n\n\n\nThe file `_quarto.yml` is also populated with the project title:\n\n\n\n\n\n``` {.yaml filename=\"_quarto.yml\"}\nproject:\n  title: \"Project-title\"\n\n```\n\n\n\n\n\n::: {.callout-caution}\n\n## Don't nest `_quarto.yml` files\n\nEach project should have one, and only one, `_quarto.yml` file. Its location defines the project root for the purpose of `quarto render` and you are likely to get unexpected behaviour if you have a `_quarto.yml` file in a subfolder.\n\n:::\n\n## Render and Preview a Project {#sec-render-a-project}\n\nFrom the project directory, you can render all the files in the project by rendering without specifying a file:\n\n``` {.bash filename=\"Terminal\"}\nquarto render\n```\n\nAll Quarto documents, with some exceptions as explained in @nte-render-targets below, will be rendered. \n\nYou can also render the contents of a subdirectory of the project by specifying the subdirectory:\n\n``` {.bash filename=\"Terminal\"}\nquarto render subdir\n```\n\nOr alternatively, from the subdirectory, render without specifying a file:\n\n``` {.bash filename=\"Terminal\"}\ncd subdir\nquarto render \n```\n\n::: {.callout-note #nte-render-targets}\n\n## What gets rendered?\n\nQuarto will render all valid Quarto input files (e.g. `.qmd`, `.ipynb`, `.md`, `.Rmd` etc.) except files or folders that start with `_`, or `.`, or a file matching `README.*md`. \n\nAll formats specifed in each file will be rendered.\n\nYou can also specify exactly what you do and do not want rendered with the `render` key in `_quarto.yml`. See [Render Targets](https://quarto.org/docs/projects/quarto-projects.html#render-targets) in the Quarto documentation for more information.\n\n::: \n\nTo preview a project when using the `default` project type, you must specify a file:\n\n```{.bash filename=\"Terminal\"}\nquarto preview index.qmd\n```\n\nQuarto will render just enough of the project to display the requested document and open a preview. \nAs you interact with the preview, e.g. follow a link in one document to another, Quarto will render any additional files as needed.\n\n## Project Configuration --- `_quarto.yml`\n\nThe file `_quarto.yml` provides project configuration. Here's a typical \n\nTypically it will include project-level options under the `project` key, project options specific to its project type, and document level options common to documents in the project.\n\n```{.yaml filename=\"_quarto.yml\"}\n\n\n```\n\nIf you are curious what a more complicated `_quarto.yml` might look like, you could look at the [`_quarto.yml` for the project that builds this book on GitHub](https://github.com/mine-cetinkaya-rundel/quarto-tdg/blob/main/_quarto.yml).\n\nAnatomy of `_quarto.yml`, project settings, options specific to a project type, options that apply to all formats, format specific options.\n\n### Project Level Options {#sec-project-options}\n\nProject level options are set under the `project` key. You've already seen projects might have a `type` and `title`. \n\n``` {.yaml filename=\"_quarto.yml\"}\nproject:\n  type: default\n  title: Data Exploration \n```\n\nAnother commonly set option is `output-dir` which specifes a location for rendered output. \n\nWithout setting `output-dir` outputs are rendered alongside their source documents. \nFor example, as you saw in the example in @sec-overview, the output `01-import.html` is rendered in the same location as `01-import.qmd`:\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\ntemp-dirs/ds-project\n├── 01-import.html\n├── 01-import.qmd\n├── 01-import_files\n│   └── libs\n├── 02-visualize.html\n├── 02-visualize.qmd\n├── 02-visualize_files\n│   └── libs\n├── README.md\n├── _quarto.yml\n└── data\n    └── records.csv\n```\n\n\n:::\n:::\n\n\n\n\n\nTo share results without sharing the source documents, it may be easier to have your outputs in their own directory. \nYou could set `output-dir` to `reports`:\n\n\n\n\n\n::: {.cell}\n\n:::\n\n``` {.yaml filename=\"_quarto.yml\"}\nproject:\n  output-dir: reports\n```\n\n\n\n\n\nNow when the project is rendered the output files end up in `reports/` folder:\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\ntemp-dirs/ds-project2\n├── 01-import.qmd\n├── 02-visualize.qmd\n├── README.md\n├── _quarto.yml\n├── data\n│   └── records.csv\n└── reports\n    ├── 01-import.html\n    ├── 01-import_files\n    ├── 02-visualize.html\n    └── 02-visualize_files\n```\n\n\n:::\n:::\n\n\n\n\n\nThe heirachical structure of the project is maintained in the output directory. \nSo, if there was another document `provenance.qmd` inside the `data/` folder, it would render to `reports/data/provencance.html`.\n\nYou can see other available project options on the [Project Options](https://quarto.org/docs/reference/projects/core.html) reference page in the Quarto documentation.\n\nSome project types also set project-level options under a key that matches their type. \nFor instance, when a project is a website, site level settings are set under the `website` key:\n\n``` {.yaml filename=\"_quarto.yml\"}\nproject:\n  type: website\n\nwebsite:\n  navbar:\n    search: true\n```\n\n### Common Metadata {#sec-common-metadata}\n\nDocument options, like those you normally set in a YAML header, can also be set in `_quarto.yml`. \nOptions set in `_quarto.yml` will be applied to all Quarto files in the project, and reduce repetition by specifying common options in a single location.\n\nAs an example, consider a project with two Quarto documents, `01-import.qmd` and `02-visualize.qmd`, where truncated versions are shown below:\n\n::: {layout-ncol=\"2\"}\n``` {.markdown filename=\"01-import.qmd\"}\n---\ntitle: Data Import and Cleaning\nauthor: Soraya Drake\nformat:\n  html:\n    toc: true\n    code-fold: true\n---\n\n## Import\n\n...\n```\n\n``` {.markdown filename=\"02-visualization.qmd\"}\n---\ntitle: Exploratory Visualization\nauthor: Soraya Drake\nformat:\n  html:\n    toc: true\n    code-fold: true\n---\n\n## Distributions\n\n...\n```\n:::\n\nThese two documents share common settings in the document YAML: `author`, and the `html` format options `toc` and `code-fold`.\nIf these options are moved to the file `_quarto.yml`, they will be applied to every Quarto document in the project.\nSo, if `_quarto.yml` is:\n\n``` {.yaml filename=\"_quarto.yml\"}\nproject: default\n\nauthor: Soraya Drake\nformat: \n  html:\n    toc: true\n    code-fold: true\n```\n\nThen the two documents can have simplified YAML headers that now only need to specify the `title`:\n\n::: {layout-ncol=\"2\"}\n``` {.markdown filename=\"01-import.qmd\"}\n---\ntitle: Data Import and Cleaning\n---\n\n## Import\n\n...\n```\n\n``` {.markdown filename=\"02-visualization.qmd\"}\n---\ntitle: Exploratory Visualization\n---\n\n## Distributions\n\n...\n```\n:::\n\nAs an added advantage, if you add more Quarto documents, you don't need to remember the exact settings you used, and can just let your new document inherit them from `_quarto.yml`.\n\nIf a document specifies a different option to `_quarto.yml`, if will override the default value. For instance, if there is another document `03-modelling.qmd` with a different author, specifying `author` in the document YAML will override the value set in `_quarto.yml`:\n\n``` {.markdown filename=\"03-modelling.qmd\"}\n---\ntitle: Modelling\nauthor: Aurelius Garcia\n---\n```\n\n::: {.callout-tip}\n\n## Directory level metadata \n\nIf you would like to specify common metadata for documents inside a sub-directory our your project, you can do so by adding a file called `_metadata.yml` to the sub-directory. Read more in the Quarto Documentation at [Directory Metadata](https://quarto.org/docs/projects/quarto-projects.html#directory-metadata).\n\n:::\n\nUsing `_quarto.yml` can help reduce duplication in the metadata of your documents, but once you have related documents in a project, you often also find you have duplicated content. Point at inlcudes in Authoring chapter.\n\n## Tools\n\n### RStudio\n\n**File** > **New Project**: Quarto Project \n\n(Might need to discuss engine, venv/renv options, or refer to other chapters)\n\n**Build Pane** **Render Project** \n\n### VS Code\n\n**Quarto: Create Project**\n\n**Quarto: Render Project**\n\n## Advanced: Project Profiles\n\n## Wrapping Up\n\nVirtual Environment -\\> Computation chapters\n\nFind yourself creating many projects with the same structure or settings, you might want to define your own custom project type.\nSee Extensions.\n\n\n\n\n\n\n::: {.cell}\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}