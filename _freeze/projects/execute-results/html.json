{
  "hash": "a2cdede4ce6df6edd15050cbbf891468",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute:\n  echo: false\n---\n\n\n\n\n\n# Projects {#sec-projects}\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\nSo far, we've concentrated on single Quarto documents: a single `.qmd` which defines all of its Quarto options in its header.\nIn this chapter, you'll learn about Quarto projects: a way to organize collections of Quarto documents.\nYou'll learn:\n\n-   What a Quarto project is\n-   How to create one, or turn an existing folder into one\n-   How working with a project differs to working with single files\n-   How to render all or part of a Quarto project\n-   How to set project level Quarto settings\n-   How to specify common metadata for documents in the project\n\n## What is a Quarto Project? {#sec-overview}\n\nFrom a technical perspective, a Quarto project is simply a folder that contains the file `_quarto.yml`.\nFrom a practical perspective, using a Quarto project has two benefits:\n\n1.  You can easily render all the Quarto documents in the project folder.\n2.  You can set options common to the documents in a single place.\n\n@fig-dir-dsproject shows the folder `ds-project`, a simple example of a data science project, that contains some Quarto documents.\n\n::: {#fig-dir-dsproject .dir-str}\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\ntemp-dirs/ds-project\n├── 01-import.qmd\n├── 02-visualize.qmd\n├── README.md\n└── data\n    └── records.csv\n```\n\n\n:::\n:::\n\n\n\n\n\nThe directory structure for a hypothetical data science project in the folder `ds-project/`.\n\n::: \n\nTo turn this folder into a Quarto project, add the file `_quarto.yml`, as shown in @fig-dir-quarto.\n\n::: {#fig-dir-quarto .dir-str}\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\ntemp-dirs/ds-project\n├── 01-import.qmd\n├── 02-visualize.qmd\n├── README.md\n├── _quarto.yml\n└── data\n    └── records.csv\n```\n\n\n:::\n:::\n\n\n\n\n\nThe folder `ds-project` is now a Quarto project because it contains `_quarto.yml`.\n\n:::\n\nThe presence of `_quarto.yml`, even if empty, signals to Quarto this is a project, and allows you to render without specifying a file:\n\n``` {.bash filename=\"Terminal\"}\nquarto render \n```\n\nQuarto will then render all Quarto documents in the project.\nIn this example, the files, `01-import.html` and `02-visualize.html`, and their supporting folders, `01-import_files/` and `02-visualize_files/` are created (@fig-dir-rendered).\n\n\n\n\n\n\n\n\n\n\n\n::: {#fig-dir-rendered .dir-str}\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\ntemp-dirs/ds-project\n├── 01-import.html\n├── 01-import.qmd\n├── 01-import_files\n│   └── libs\n├── 02-visualize.html\n├── 02-visualize.qmd\n├── 02-visualize_files\n│   └── libs\n├── README.md\n├── _quarto.yml\n└── data\n    └── records.csv\n```\n\n\n:::\n:::\n\n\n\n\n\nThe contents of `ds-project/` after `quarto render` is called.\n\n::: \n\nYou'll learn more about previewing and rendering projects in @sec-render-a-project.\n\nBeyond indicating that the folder is a Quarto project, the file `_quarto.yml` also stores Quarto YAML options.\nThese can be project-level options or document-level options common to the documents in the project. \nProject-level options are set under `project`, one of which is `type`. \nIf the file `_quarto.yml` is empty, or if `type` is unspecified, the `type` is assumed to be `default`. That is, it's equivalent to:\n\n``` {.yaml filename=\"_quarto.yml\"}\nproject:\n  type: default\n```\n\nOther project types include `manuscript`, `website`, and `book`, which you'll learn more about in @sec-manuscripts, @sec-websites and @sec-books.\n\nYou'll learn about a few more project-level options in @sec-project-options and about setting common document options in @sec-common-metadata.\n\n::: {.callout-tip}\n\n## RStudio Projects\n\nThe file that identifies a folder as a Quarto project, `_quarto.yml`, is distinct from the file that identifies a folder as an RStudio project, `folder_name.Rproj`. \nHowever, in practice the concept of what makes a folder a \"project\" is the same, and folders are often both a Quarto project and RStudio project, and include both files.\n\n:::\n\n## Create a Project\n\nYou've already seen how you can create a project in an exisiting directory by adding the file `_quarto.yml`. \nYou can also create a project in a new directory using the `quarto create` command:\n\n``` {.bash filename=\"Terminal\"}\nquarto create project\n```\n\nQuarto will give you an interactive prompt asking for the project type, directory name and project title. \nYou can also specify these directly to the command:\n\n``` {.bash filename=\"Terminal\"}\nquarto create project default project-name project-title\n```\n\nQuarto will then create the folder, e.g. `project-name` and populate it with `_quarto.yml` and a Quarto document with the same name as the project title, `project-title.qmd`:\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\ntemp-dirs/project-name\n├── _quarto.yml\n└── project-title.qmd\n```\n\n\n:::\n:::\n\n\n\n\n\nThe file `_quarto.yml` is also populated with the project title:\n\n\n\n\n\n``` {.yaml filename=\"_quarto.yml\"}\nproject:\n  title: \"Project-title\"\n\n```\n\n\n\n\n\n::: {.callout-caution}\n\n## Don't nest `_quarto.yml` files\n\nEach project should have one, and only one, `_quarto.yml` file. Its location defines the project root for the purpose of `quarto render` and you are likely to get unexpected behaviour if you have a `_quarto.yml` file in a subfolder.\n\n:::\n\n## Render and Preview a Project {#sec-render-a-project}\n\nFrom the project directory, you can render all of the files in the project by rendering without specifying a file:\n\n``` {.bash filename=\"Terminal\"}\nquarto render\n```\n\nAll Quarto documents, with some exceptions as explained in @nte-render-targets, will be rendered. \n\nYou can also render the contents of a subdirectory of the project by specifying the subdirectory:\n\n``` {.bash filename=\"Terminal\"}\nquarto render subdir\n```\n\nOr alternatively, from the subdirectory, render without specifying a file:\n\n``` {.bash filename=\"Terminal\"}\ncd subdir\nquarto render \n```\n\n::: {.callout-note #nte-render-targets}\n\n## What gets rendered?\n\nQuarto will render all valid Quarto input files (e.g. `.qmd`, `.ipynb`, `.md`, `.Rmd`, etc.) except files or folders that start with `_`, or `.`, or a file matching `README.*md`. \n\nAll formats specifed in each file will be rendered.\n\nYou can also specify exactly what you do and do not want rendered with the `render` key in `_quarto.yml`. See [Render Targets](https://quarto.org/docs/projects/quarto-projects.html#render-targets) in the Quarto documentation for more information.\n\n::: \n\nTo preview a project when using the `default` project type, you must specify a file:\n\n```{.bash filename=\"Terminal\"}\nquarto preview index.qmd\n```\n\nQuarto will render just enough of the project to display the requested document and open a preview. \nAs you interact with the preview, e.g. follow a link in one document to another, Quarto will render any additional files as needed.\n\n## Project Configuration --- `_quarto.yml`\n\nThe file `_quarto.yml` provides project configuration. Typically it will include project-level options, project options specific to the project type, and document-level options common to documents in the project.\n\nHere's a typical example:\n\n```{.yaml filename=\"_quarto.yml\"}\nproject:                         #<1>\n  type: website                  #<1>\n  title: \"Quarterly Reports\"     #<1>\n\nwebsite:                         #<2>\n  navbar:                        #<2>\n    search: true                 #<2>\n\nexecute:                         #<3>\n  echo: false                    #<3>\n\nformat:                          #<3>\n  html:                          #<3>\n    toc: true                    #<3>\n```\n1. Project level options are set under `project`. You'll learn more about these in @sec-project-options.\n2. Project type specific options are set under the option that matches the type, e.g. `website`. You learn about these in the later chapters on the different project types.\n3. Document-level defaults that apply to all documents in the project. You'll learn more about these below in @sec-common-metadata.\n\nIf you are curious what a more complicated `_quarto.yml` might look like, you could look at the [`_quarto.yml` file on GitHub](https://github.com/mine-cetinkaya-rundel/quarto-tdg/blob/main/_quarto.yml) for the project that builds this book.\n\n### Project Level Options {#sec-project-options}\n\nProject level options are set under the `project` key. You've already seen projects might have a `type` and `title`. \n\n``` {.yaml filename=\"_quarto.yml\"}\nproject:\n  type: default\n  title: Data Exploration \n```\n\nAnother commonly set option is `output-dir` which specifes a location for rendered output. \n\nWithout setting `output-dir` outputs are rendered alongside their source documents. \nFor example, as you saw in @fig-dir-rendered, the output `01-import.html` is rendered in the same location as `01-import.qmd`.\n\nIt might be easier to have your outputs written to their own directory. \nYou could set `output-dir` to `reports`:\n\n\n\n\n\n::: {.cell}\n\n:::\n\n``` {.yaml filename=\"_quarto.yml\"}\nproject:\n  output-dir: reports\n```\n\n\n\n\n\nNow when the project is rendered the output files end up in `reports/` folder, as shown in @fig-dir-outputdir.\n\n::: {#fig-dir-outputdir .dir-str}\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\ntemp-dirs/ds-project2\n├── 01-import.qmd\n├── 02-visualize.qmd\n├── README.md\n├── _quarto.yml\n├── data\n│   └── records.csv\n└── reports\n    ├── 01-import.html\n    ├── 01-import_files\n    ├── 02-visualize.html\n    └── 02-visualize_files\n```\n\n\n:::\n:::\n\n\n\n\n\nThe contents of `ds-project/` after rendering when `output-dir` is set to `reports`.\n\n:::\n\nThe heirachical structure of the project is maintained in the output directory. \nSo, if there was another document `provenance.qmd` inside the `data/` folder, it would render to `reports/data/provenance.html`.\n\n::: {.callout-tip}\n\n## Other types of project have a default output directory\n\nYou usually don't need to set `output-dir` for other project types because they have a default. For example, websites render to a `_site/` folder, and books to a `_book/` folder.\n\n:::\n\nYou can see other available project options on the [Project Options](https://quarto.org/docs/reference/projects/core.html) reference page in the Quarto documentation.\n\nSome project types also set project-level options under a key that matches their type. \nFor instance, when a project is a website, site level settings are set under the `website` key:\n\n``` {.yaml filename=\"_quarto.yml\"}\nproject:\n  type: website\n\nwebsite:\n  navbar:\n    search: true\n```\n\n### Common Metadata {#sec-common-metadata}\n\nDocument options, like those you normally set in a YAML header, can also be set in `_quarto.yml`. \nOptions set in `_quarto.yml` will be applied to all Quarto files in the project, and reduce repetition by specifying common options in a single location.\n\nAs an example, consider a project with two Quarto documents, `01-import.qmd` and `02-visualize.qmd`, where truncated versions are shown below:\n\n::: {layout-ncol=\"2\" .column-page-right}\n``` {.markdown filename=\"01-import.qmd\"}\n---\ntitle: Data Import and Cleaning\nauthor: Soraya Drake\nformat:\n  html:\n    toc: true\n    code-fold: true\n---\n\n## Import\n\n...\n```\n\n``` {.markdown filename=\"02-visualization.qmd\"}\n---\ntitle: Exploratory Visualization\nauthor: Soraya Drake\nformat:\n  html:\n    toc: true\n    code-fold: true\n---\n\n## Distributions\n\n...\n```\n:::\n\nThese two documents share common settings in the document YAML: `author`, and the `html` format options `toc` and `code-fold`.\nIf these options are moved to the file `_quarto.yml`, they will be applied to every Quarto document in the project.\nSo, if `_quarto.yml` is:\n\n``` {.yaml filename=\"_quarto.yml\"}\nproject: default\n\nauthor: Soraya Drake\n\nformat: \n  html:\n    toc: true\n    code-fold: true\n```\n\nThen the two documents can have simplified YAML headers that now only need to specify the `title`:\n\n::: {layout-ncol=\"2\" .column-page-right}\n``` {.markdown filename=\"01-import.qmd\"}\n---\ntitle: Data Import and Cleaning\n---\n\n## Import\n\n...\n```\n\n``` {.markdown filename=\"02-visualization.qmd\"}\n---\ntitle: Exploratory Visualization\n---\n\n## Distributions\n\n...\n```\n:::\n\nAs an added advantage, if you add more Quarto documents, you don't need to remember the exact settings you used, and can just let your new document inherit them from `_quarto.yml`.\n\nIf a document specifies a different option to `_quarto.yml`, it will override the default value. For instance, if there is another document `03-modelling.qmd` with a different author, specifying `author` in the document YAML will override the value set in `_quarto.yml`:\n\n``` {.markdown filename=\"03-modelling.qmd\"}\n---\ntitle: Modelling\nauthor: Aurelius Garcia\n---\n```\n\n::: {.callout-tip}\n\n## Directory level metadata \n\nIf you would like to specify common metadata for documents inside a sub-directory our your project, you can do so by adding a file called `_metadata.yml` to the sub-directory. Read more in the Quarto Documentation at [Directory Metadata](https://quarto.org/docs/projects/quarto-projects.html#directory-metadata).\n\n:::\n\nUsing `_quarto.yml` can help reduce duplication in the metadata of your documents, but once you have related documents in a project, you often also find you have duplicated content. You can reduce duplication of content by using the include shortcode described in @sec-includes.\n#### Multiple Formats\n\nYou can set defaults for more than one format in `_quarto.yml` by nesting them under `format`:\n\n```{.yaml filename=\"_quarto.yml\"}\nformat:  \n  pdf: \n    toc: true\n    toc-title: \"Contents\"\n  html: \n    toc: true\n    toc-title: \"On this page\"\n```\n\nIf an option applies to all formats you can list it at the top-level. For example, you could pull out `toc: true` to the top-level:\n\n```{.yaml filename=\"_quarto.yml\"}\ntoc: true\n\nformat:  \n  pdf: \n    toc-title: Contents\n  html: \n    toc-title: On this page\n```\n\nIf a file doesn't specify a format, all formats described in `_quarto.yml` will be rendered when the project is rendered. However, if a document specifies any formats only those will be rendered. For example, you could specify a document should only be rendered to `html`:\n\n```{.yaml filename=\"report.qmd\"}\n---\ntitle: \"Report\"\nformat: html\n---\n```\n\nIf you need to override options for one format, but still want the other formats rendered, you'll need to specify all formats. \nUse  `default` as the value for any formats with no options overridden. \nFor example, you might set the table of contents depth for the `html` format, but use all the default settings for `pdf`:\n\n```{.yaml filename=\"report.qmd\"}\n---\ntitle: \"Report\"\nformat: \n  html:\n    toc-depth: 3\n  pdf: default\n---\n```\n\nYou can use the same idea to add additional formats for a single document that aren't specified at all in `_quarto.yml`:\n\n```{.yaml filename=\"report.qmd\"}\n---\ntitle: \"Report\"\nformat: \n  html: default\n  pdf: default\n  docx: default\n---\n```\n\n## Tools\n\nThere are a few tool-specific shortcuts when you are working with a Quarto Project. \nYou can read more about them for your tool in this section.\n\n### RStudio\n\n#### Creating a Project\n\nYou can create a new project in RStudio using with **File** > **New Project**. Select to create a project in a **New Directory** then select **Quarto Project**. \n\n![New Project dialog in RStudio. Quarto project options include Quarto Project, Quarto Website, Quarto Blog and Quarto Book.](images/projects-rstudio-new.png){fig-alt=\"A screenshot of the new project dialog in RStudio.\"}\n\n#### Rendering a Project\n\nRStudio will detect when an RStudio project is also a Quarto project and display a **Build** pane. The **Render** button in this pane will render the entire project. You can also access this command via the shortcut {{< kbd mac=Shift-Command-B win=Shift-Control-B linux=win=Shift-Control-B >}}. \n\n![The Render Project button is available in the Build Pane when RStudiio detects a Quarto project.](images/projects-rstudio-build.png){fig-alt=\"Screenshot of the Build Pane in RStudio showing a button labelled Render Project.\"}\n\n::: {.callout-tip}\n\nIf you add `_quarto.yml` to an existing RStudio project, you may need to close and reopen the project to see the Build Pane.\n\n:::\n\n#### Previewing a Document\n\nIf you have a document in your project open in the Editor window you can use the usual Render button (or shortcut) to preview the document. This command is equivalant to running:\n\n```{.bash filename=\"Terminal\"}\nquarto preview document.qmd --to default --no-watch-inputs --no-browse\n```\n\nThis is useful when you are editing the file, but it is not equivalent to rendering the project. In particular, it won't render all formats, nor render other files unless they are explicitly needed. \n\n### VS Code w/ Quarto Extension\n\n#### Creating a Project\n\nYou can create a new project with the **Quarto: Create Project** command. You will be prompted for a type, location and directory name. \n\n#### Rendering a Project\n\nRender your entire project with the **Quarto: Render Project** command.\n\n#### Previewing a Document\n\nIf you have a document in your project open, you can use the usual Preview button, shortcut or **Quarto: Preview** command preview the document. This is useful when you are editing the file, but it is not equivalent to rendering the project. In particular, it won't render all formats, nor render other files unless they are explicitly needed. \n\n## Wrapping Up\n\nYou've seen how a Quarto project allows you to organize, configure and render a folder of documents.\nProject are particularly useful when you have a set of documents that share some metadata. \nBut, even without shared metadata, the ability to easily render a directory of documents is a good reason to use a project. \nAnd as you'll see later websites, books and manuscripts are special types of projects.\n\nAs you start using projects you might find these other sections of the book useful: \n\n* To control computational dependencies for a project it is common to set up a computational environment. You can learn more in @sec-computations.\n\n* If you find yourself creating many project with the same structure or settings you might want to define a custom project type. You can read more in @sec-extensions.\n\n\n\n\n\n\n::: {.cell}\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}