{
  "hash": "8d93c495fe20d7390e26d4498a22e06f",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute:\n  echo: false\n---\n\n\n# Projects {#sec-projects}\n\n\n::: {.cell}\n\n:::\n\n\nSo far, we've concentrated on single Quarto documents: a single `.qmd` which defines all of its Quarto options in its header. In this chapter, you'll learn about Quarto projects: a way to organize collections of Quarto documents. You learn how\n\n-   what a Quarto project is\n-   how to create one, or turn an existing folder into one\n-   how working with a project differs to working with single files\n-   how to render all or part of a Quarto project\n-   how to set project level Quarto settings\n-   how to specify common metadata for documents in the project\n-   how to share content across documents in a project\n\n## What is a Quarto Project?\n\nFrom a technical perspective, a Quarto project is simply a folder that contains the file `_quarto.yml`. From a practical perspective, a Quarto project allows you to: easily render all the Quarto documents in the folder; and set options common to the documents in a single place.\n\nConsider the folder `ds-project`, a simple example of a data science project, that contains some Quarto documents:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n/var/folders/_z/nvxpvl8j20l76y3t12p7l5s40000gn/T/Rtmp8LM0cf/ds-project\n├── 01-import.qmd\n├── 02-visualize.qmd\n├── README.md\n└── data\n    └── records.csv\n```\n\n\n:::\n:::\n\n\nTo turn this folder into a Quarto project, add the file `_quarto.yml`:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n/var/folders/_z/nvxpvl8j20l76y3t12p7l5s40000gn/T/Rtmp8LM0cf/ds-project\n├── 01-import.qmd\n├── 02-visualize.qmd\n├── README.md\n├── _quarto.yml\n└── data\n    └── records.csv\n```\n\n\n:::\n:::\n\n\nThe presence of `_quarto.yml`, even if empty, signals to Quarto this is a project, and allows you to render without specifying a file:\n\n``` {.bash filename=\"Terminal\"}\nquarto render \n```\n\nQuarto will then render all Quarto documents in the project. In this example, the files, `01-import.html` and `02-visualize.html`, and their supporting folders, `01-import_files/` and `02-visualize_files/` are created:\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n/var/folders/_z/nvxpvl8j20l76y3t12p7l5s40000gn/T/Rtmp8LM0cf/ds-project\n├── 01-import.html\n├── 01-import.qmd\n├── 01-import_files\n│   └── libs\n├── 02-visualize.html\n├── 02-visualize.qmd\n├── 02-visualize_files\n│   └── libs\n├── README.md\n├── _quarto.yml\n└── data\n    └── records.csv\n```\n\n\n:::\n:::\n\n\nYou'll learn more about rendering projects in \n\nSomething here about other role of `_quarto.yml`\nSomething here about specific kinds of project, and `project: default`\nSomething here about general use cases for projects\n\n\n\n\nThe file `_quarto.yml` has two roles:\n\n1.  The presence of `_quarto.yml` alerts Quarto that this a project.\n\n2.  The contents of `_quarto.yml` can provide project-level, and document-level YAML options.\n\n\n`_quarto.yml` contains project level YAML metadata. Some apply to project types. Also specify any document level metadata to apply to all files.\n\n\nUse cases:\n\n-   A collection of .qmd files that you want to apply the same Quarto format settings too. E.g. homeworks for a specific class (set `author`, `echo`, `pdf: toc` etc). E.g. a series of reports based on same data.\n\nA collection of documents that you naturally render into a single unit, e.g. pages that make up a website, or chapters that make up a book. Quarto has special project types for these examples. You'll learn more about them in [Websites](#sec-websites) and [Books](#sec-books).\n\nthat contains the yaml\n\n``` yaml\nproject: default\n```\n\n## Create a project\n\n### Empty\n\n``` {.bash filename=\"Terminal\"}\nquarto create-project\n```\n\n``` {.bash filename=\"Terminal\"}\nquarto create project default\n```\n\n### Existing\n\nOr add `_quarto.yml` to an existing directory\n\nExamples: websites, book, manuscript\n\nDon't nest `_quarto.yml` files\n\n## Render a Project\n\n``` {.bash filename=\"Terminal\"}\nquarto render\n```\n\nAll valid Quarto input files (`.qmd`, `.ipynb`, `.md`, `.Rmd`)\n\nIs everything rendered? Well no, ignores files that start with `_` or `.` and `README.*md`. Also specify exactly what you do and do not want rendered with the `render` key (https://quarto.org/docs/projects/quarto-projects.html#render-targets)\n\n``` {.bash filename=\"Terminal\"}\nquarto render directory\n```\n\n``` {.bash filename=\"Terminal\"}\ncd directory\nquarto render \n```\n\nPreview will render just enough of project to display requested doc:\n\n``` {.bash filename=\"Terminal\"}\nquarto preview index.qmd\n```\n\nBut, will generate additional targets as needed (e.g. from following links in preview)\n\n## Project Level Settings\n\nhttps://quarto.org/docs/reference/projects/core.html\n\n## Common Metadata\n\nTruncated versions of the two Quarto documents, `01-import.qmd` and `02-visualize.qmd`, are shown below:\n\n::: {layout-ncol=\"2\"}\n``` {.markdown filename=\"01-import.qmd\"}\n---\ntitle: Data Import and Cleaning\nauthor: Soraya Drake\nhtml:\n  toc: true\n  code-fold: true\n---\n\n## Import\n\n...\n```\n\n``` {.markdown filename=\"02-visualization.qmd\"}\n---\ntitle: Exploratory Visualization\nauthor: Soraya Drake\nhtml:\n  toc: true\n  code-fold: true\n---\n\n## Distributions\n\n...\n```\n:::\n\nAs is often the case for documents that are part of a larger project, these two documents share common settings in the document YAML: `author`, and the `html` format options `toc` and `code-fold`. If these options are moved to the file `_quarto.yml`, they will be applied to every Quarto document in the project. So, if `_quarto.yml` is:\n\n``` {.yaml filename=\"_quarto.yml\"}\nproject: default\n\nauthor: Soraya Drake\nhtml:\n  toc: true\n  code-fold: true\n```\n\nThen the two documents can have simplified YAML headers that now only need to specify the `title`:\n\n::: {layout-ncol=\"2\"}\n``` {.markdown filename=\"01-import.qmd\"}\n---\ntitle: Data Import and Cleaning\n---\n\n## Import\n\n...\n```\n\n``` {.markdown filename=\"02-visualization.qmd\"}\n---\ntitle: Exploratory Visualization\n---\n\n## Distributions\n\n...\n```\n:::\n\nAs an added advantage, if you add more Quarto documents, you don't need to remember the exact settings you used, and can just let your new document inherit them from `_quarto.yml`.\n\nExamples of moving document YAML to `_quarto.yml`: simple one reducing repetition, another one where formats are only used in some documents.\n\n`output-dir`, `jupyter`\n\n\nDirectory level metadata `_metadata.yml`\n\nIf you are curious what a more complicated `_quarto.yml` might look like, you could look at the [`_quarto.yml` for the project that builds this book on GitHub](https://github.com/mine-cetinkaya-rundel/quarto-tdg/blob/main/_quarto.yml).\n\nAnatomy of `_quarto.yml`, project settings, options specific to a project type, options that apply to all formats, format specific options.\n\n## Common Content\n\nWhat if I want to reduce repetition of content? `include` shortcode Another way to reduce repetition `include`? Also needs knowledge of `_`\n\nWorks outside projects, but commonly turns up once you have more than one Quarto documents and are probably using a project.\n\n## Tools\n\n### RStudio\n\n### VS Code\n\n## Advanced: Project Profiles\n\n## Wrapping Up\n\nVirtual Environment -\\> Computation chapters\n\nFind yourself creating many projects with the same structure or settings, you might want to define your own custom project type. See Extensions.\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}