{
  "hash": "b1e3e31a7f4b27b95e039577b5f6e7cb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Looking under the hood\n---\n\n\n\n\n\nSo far, we haven't talked much about what happens behind the scenes when you run `quarto render`.\nIn this chapter, you'll learn more about what Quarto does under the hood, so you can troubleshoot problems when they occur.\n\n## What does Quarto do?\n\nAt a high level, rendering a Quarto document involves two steps:\n\n1.  **Code execution via the computational engine (Knitr, jupyter, or Julia):** the computational engine executes all the code cells in the source document and replaces the cells with static Markdown content containing the results.\n    The result is a Markdown file (`.md`).\n\n2.  **Format conversion via pandoc:** the Markdown file generated in the previous step, is passed to pandoc which converts from Markdown to the required output format.\n\nThis process, with a few extra details, is illustrated in @fig-quarto-process.\nYou'll dive into the details below, but two key takeaways are that Quarto coordinates two other tools (the computational engine and pandoc), and all files, regardless of engine and format, pass through an intermediate Markdown file.\n\n![](images/look-under-hood-quarto.jpg){#fig-quarto-process fig-alt=\"Diagram of Quarto's rendering process. A QMD file enters Quarto on the left, and HTML, DOCX, PPTX and PDF files exit Quarto on the right. Inside Quarto, arrows lead from the input file through the Computational Engine to a Markdown file, and then through pandoc to the output files.\"}\n\nYou can also see this process in the messages Quarto prints as it runs.\nThese messages are generated when you run `quarto render` or `quarto preview`, but you may have missed them because they scroll quickly past or are hidden in a pane in your IDE.\nIn @fig-r-output, you can see the messages Quarto prints in the Terminal during a successful render of the `document-r.qmd`—a document with `format: html` and three R code cells.\nKnitr generates the first chunk of output as it processes the document and runs the code in the three (unnamed) chunks, resulting in the file `document-r.knit.md`.\nThe remaining output gives some information on the settings being passed along to pandoc.\n\n@fig-py-output shows the output for rendering `document-python.qmd` — a very similar document, except instead of R code cells, it has Python code cells.\nYou can see the engine's progress, now Jupyter, appears different, but the hand-off to pandoc is identical.\n\n::::: panel-tabset\n## Knitr\n\n::: {#fig-r-output}\n``` {.default filename=\"Terminal\"}\n$ quarto render document-r.qmd \n\nprocessing file: document-r.qmd  \n1/6                              \n2/6 [unnamed-chunk-1]            \n3/6                              \n4/6 [unnamed-chunk-2]            \n5/6                              \n6/6 [unnamed-chunk-3]            \noutput file: document-r.knit.md   \n\npandoc                           \n  to: html                       \n  output-file: document-r.html   \n  standalone: true               \n  section-divs: true             \n  html-math-method: mathjax      \n  wrap: none                     \n  default-image-extension: png   \n  \nmetadata\n  document-css: false\n  link-citations: true\n  date-format: long\n  lang: en\n  title: A Document\n  \nOutput created: document-r.html\n```\n\nThe output printed by `quarto render` when run on a file with three R code cells.\n:::\n\n## Jupyter\n\n::: {#fig-py-output}\n``` {.default filename=\"Terminal\"}\n$ quarto render document-python.qmd\n\nStarting python3 kernel...Done\n\nExecuting 'document-python.quarto_ipynb'\n  Cell 1/3: ''...Done\n  Cell 2/3: ''...Done\n  Cell 3/3: ''...Done\n\npandoc \n  to: html\n  output-file: document-python.html\n  standalone: true\n  section-divs: true\n  html-math-method: mathjax\n  wrap: none\n  default-image-extension: png\n  \nmetadata\n  document-css: false\n  link-citations: true\n  date-format: long\n  lang: en\n  title: A Document\n  \nOutput created: document-python.html\n```\n\nThe output printed by `quarto render` when run on a file with three Python code cells.\n:::\n:::::\n\nBelow you'll learn a bit more about each step. To help describe the transformations a document undergoes, we'll use `render-process.qmd` a Quarto document that targets `format: pdf` and has two executable R code cells:\n\n::: {#lst-render-process}\n\n````markdown         \n\n---\ntitle: My document\nkeep-md: true\nkeep-tex: true\nformat: \n  pdf:\n    toc: true\n---\n\n## A computation\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(1:10)\n```\n\n::: {.cell-output-display}\n![](look-under-hood_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n## Some placeholder text\n\n{{< lipsum 1 >}}\n\n\n````\n\nA example Quarto document you'll track through the render process.\n\n:::\n\n### Before the computational engine\n\nBefore anything else, Quarto first resolves any `include` shortcodes, then parses your file to extract the YAML header and code cells.\nThe combination of YAML options and the language of code cells is used to select the appropriate computational engine.\n\nIt's at this stage you'll get errors about malformed YAML — these start with `ERROR: YAMLError:`.\nLearn more about common YAML issues in @sec-yaml.\n\n### Computational engine\n\nEach file is only ever run through one computational engine: Knitr, jupyter, or Julia.\n\nWith no additional information from the YAML metadata (e.g. none of `engine`, `jupyter`, nor `knitr`) Quarto will choose the engine based on the file extension and the language of executable code cells in the document.\nFor `.qmd` documents, Quarto will use:\n\n-   Knitr, if there are **any** `{r}` code cells.\n\n-   Jupyter, if there are any executable code cells other than `{r}`.\n    The jupyter kernel will be chosen based on the first executable code cell.\n\n-   The `markdown` engine, equivalent to using no computational engine, if there are no executable cells.\n\n::: callout-note\n## Avoiding execution\n\nFor the purposes of choosing an engine, a code cell with the option `eval: false` is still considered an executable code cell, even though the code inside will not be executed.\nThis means you might see an engine starting even if you've set `eval: false` at the document level.\nTo avoid even starting an engine, and executing any code, you can explicitly use the markdown engine:\n\n``` yaml\n---\nengine: markdown\n---\n```\n:::\n\nFor files other than `.qmd` the engine is chosen based on the file type: jupyter for `.ipynb` , but see @nte-ipynb below; Knitr for `.Rmd` ; and markdown for`.md`.\n\nThe computational engine takes over the job of running the executable code cells and replacing them with appropriate markdown abiding by the `execute` options specified in the YAML metadata, and options set in code cells.\nThe result is a Markdown file.\nCommon errors that arise during execution by the computational engine are discussed below in @sec-computational-errors.\n\n::: {#nte-ipynb .callout-note}\n## Python notebooks aren't normally executed\n\nSince `.ipynb` files store their output alongside the source, the code cells are not executed by default when you run `quarto render`.\nTo execute the cells, pass the `--execute` flag to `quarto render`:\n\n``` {.bash filename=\"Terminal\"}\nquarto render document.ipynb --execute\n```\n:::\n\n### Pandoc\n\nThe Markdown file is passed along to pandoc for conversion into the desired output formats.\nPandoc's role in rendering provides many of the features for [authoring](#sec-authoring) Quarto documents.\nFor example, the syntax you learned for headings, quotations, lists, tables, links and footnotes is the syntax defined by pandoc (see [Pandoc's Markdown](https://pandoc.org/MANUAL.html#pandocs-markdown) on the pandoc documentation site).\nOther more complicated features, like the default handling of citations with `citeproc`, also come directly from pandoc (see[Citations](https://pandoc.org/MANUAL.html#citations)on the pandoc documentation site).\n\nHowever, Quarto adds many of its own features beyond those available in pandoc.\nThese are added via an established mechanism for customizing pandoc output: filters.\nWhen pandoc reads an input file, it translates it into an abstract representation known as an abstract syntax tree.\nFilters are functions that operate on this abstract syntax tree transforming it before it is written out to the desired format.\nCross-references, shortcodes, and code annotation are examples of features that Quarto add via filters.\n\nSometimes Quarto returns the file unchanged to you from pandoc, but for some formats Quarto does some additional processing.\n\n### After pandoc\n\nWhen you generate PDF output, either via `format: pdf` or `format: typst` , there is an additional step in the process.\nQuarto uses pandoc to generate an intermediate file `.tex` for `format: pdf`, or `.typ` for `format: typst`, but then calls LaTeX or Typst itself to generate the PDF.\n\nYou can examine the intermediate file with the `keep-tex` and `keep-typst` options respectively.\n\nTypst and LaTeX\n\n> customize pandoc to fit your needs, including a template system and a powerful system for writing filters.\n\nare combined with the non-code content into a Markdown file.\nThis Markdown file is then passed along to Pandoc which converts it to the required output format.\n\n.\n\nStarting with your input document, often a `.qmd` (but it could be an `.md`, `.ipynb`, `.Rmd`, or a specially formatted script file).\n\nProcessed by a computational engine: code cells are executed and outputs collected.\n\nResult is a markdown file, you can get it, and examine it with `keep-md: true`.\n\nMarkdown file goes through Pandoc to generate output format.\nQuarto customizes the Pandoc process\n\nquarto customization filters, templates, readers\n\nGeneral diagram with engine + Pandoc Include shortcode, other shortcodes, filters etc.\n\n## Troubleshooting\n\n``` {.bash filename=\"Terminal\"}\nquarto check\n```\n\n``` default\nQuarto 1.5.56\n[✓] Checking versions of quarto binary dependencies...\n      Pandoc version 3.2.0: OK\n      Dart Sass version 1.70.0: OK\n      Deno version 1.41.0: OK\n      Typst version 0.11.0: OK\n[✓] Checking versions of quarto dependencies......OK\n[✓] Checking Quarto installation......OK\n      Version: 1.5.56\n      Path: /Applications/quarto/bin\n\n[✓] Checking tools....................OK\n      TinyTeX: v2024.03.13\n      Chromium: (not installed)\n\n[✓] Checking LaTeX....................OK\n      Using: TinyTex\n      Path: /Users/charlottewickham/Library/TinyTeX/bin/universal-darwin\n      Version: 2024\n\n[✓] Checking basic markdown render....OK\n\n[✓] Checking Python 3 installation....OK\n      Version: 3.12.2\n      Path: /Users/charlottewickham/.pyenv/versions/3.12.2/bin/python3\n      Jupyter: 5.7.2\n      Kernels: julia-1.10, python3\n\n[✓] Checking Jupyter engine render....OK\n\n[✓] Checking R installation...........OK\n      Version: 4.3.3\n      Path: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources\n      LibPaths:\n        - /Users/charlottewickham/Documents/posit/quarto-tdg/renv/library/R-4.3/aarch64-apple-darwin20\n        - /Users/charlottewickham/Library/Caches/org.R-project.R/R/renv/sandbox/R-4.3/aarch64-apple-darwin20/ac5c2659\n      knitr: 1.44\n      rmarkdown: 2.25\n\n[✓] Checking Knitr engine render......OK\n```\n\nCheck your Quarto version against the latest release.\nParticularly when documented features don't seem to work for you.\n\nCheck Python/R install is the one you expect.\n\nYour \"engine render\" is OK.\n\n\\- `quarto check`\n\n\\- check the engine\n\nTo override the automatic choice you can explicitly set the engine with the `engine` key:\n\n``` yaml\n---\nengine: jupyter\n---\n```\n\nIn particular, Quarto will never select the `julia` engine, you must opt-in via the `engine` key.\n\nIf you've set any `knitr` , `jupyter` or `julia` options, Quarto will also assume you want the corresponding engine\n\n## Errors from the computational engine {#sec-computational-errors}\n\nIf your Quarto document fails to make it through the computational engine there are generally three culprits:\n\n-   The wrong engine is being used\n\n-   Your code has errors in it: label chunks, Check code interactively\n\n-   The enviroment Quarto sees isn't the one you expect/want\n\n\\- label chunks\n\nWrong environment\n\nSend to Python and R chapters for environment problems\n\n\\- look at intermediate outputs\n\n``` yaml\n---\nkeep-md: true\n---\n```\n\n`keep-ipynb`\n\n`keep-tex`\n\n`keep-typ`\n\nAsking for help\n\nMinimal reproducible example.\n\nGitHub discussions, Posit community\n\n## Case Studies\n\nYAML problems\n\nCode problems\n\nPandoc problems?\nDo these exist?\n\nLaTeX problems?\n\n## Preview vs. Render\n\n## What does Quarto do when rendering projects\\>\n\n## What about documents that specify more than one format?",
    "supporting": [
      "look-under-hood_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}