---
execute:
  echo: false

---

# Projects {#sec-projects}

```{r}
library(fs)
library(quarto)
library(yaml)
dir_create("temp-dirs")
```

So far, we've concentrated on single Quarto documents: a single `.qmd` which defines all of its Quarto options in its header.
In this chapter, you'll learn about Quarto projects: a way to organize collections of Quarto documents.
You learn

-   what a Quarto project is
-   how to create one, or turn an existing folder into one
-   how working with a project differs to working with single files
-   how to render all or part of a Quarto project
-   how to set project level Quarto settings
-   how to specify common metadata for documents in the project
-   how to share content across documents in a project

## What is a Quarto Project? {#sec-overview}

From a technical perspective, a Quarto project is simply a folder that contains the file `_quarto.yml`.
From a practical perspective, using a Quarto project has two benefits:

1.  You can easily render all the Quarto documents in the project folder.
2.  You can set options common to the documents in a single place.

Consider the folder `ds-project`, a simple example of a data science project, that contains some Quarto documents:

```{r}
# TODO: prettify output so only see `ds-project` at top, not the full path
# Code to generate a pretty tree
dir <- path("temp-dirs", "ds-project")
dir_create(dir, "data")
file_create(dir, c("data/records.csv", "README.md", "01-import.qmd", "02-visualize.qmd"))
dir_tree(dir)
```

To turn this folder into a Quarto project, add the file `_quarto.yml`:

```{r}
file_create(dir, "_quarto.yml")
dir_tree(dir)
```

The presence of `_quarto.yml`, even if empty, signals to Quarto this is a project, and allows you to render without specifying a file:

``` {.bash filename="Terminal"}
quarto render 
```

Quarto will then render all Quarto documents in the project.
In this example, the files, `01-import.html` and `02-visualize.html`, and their supporting folders, `01-import_files/` and `02-visualize_files/` are created:

```{r}
#| include: false
quarto_render(dir)
```

```{r}
dir_tree(dir, recurse = 1)
```

You'll learn more about previewing and rendering projects in @sec-render-a-project.

Beyond indicating that the folder is a Quarto project, the file `_quarto.yml` also stores Quarto YAML options.
These can be project-level options or document-level options common to the documents in the project. 
Project-level options are set under `project`, one of which is `type`. 
If the file `_quarto.yml` is empty, or if `type` is unspecified, the `type` is assumed to be `default`, i.e. it's equivalent to:

``` {.yaml filename="_quarto.yml"}
project:
  type: default
```

Other project types include `manuscript`, `website` and `book`, which you'll learn more about in @sec-manuscripts, @sec-websites and @sec-books.

You'll learn about a few more project-level options in @sec-project-options and about setting common document options in @sec-common-metadata.

::: {.callout-tip}

## RStudio Projects

The file that identifies a folder as a Quarto project, `_quarto.yml`, is distinct from the file that identifies a folder as an RStudio project, `folder_name.Rproj`. 
However, in practice the concept of what makes a folder a "project" is the same, and folders are often both a Quarto project and RStudio project, and include both files.

:::

## Create a Project

You've already seen how you can create a project in an exisiting directory by adding the file `_quarto.yml`. 
You can also create a project in a new directory using the `quarto create` command:

``` {.bash filename="Terminal"}
quarto create project
```

Quarto will give you an interactive prompt asking for the project type, directory name and project title. 
You can also specify these directly to the command:

``` {.bash filename="Terminal"}
quarto create project default project-name project-title
```

Quarto will then create the folder, e.g. `project-name` and populate it with `_quarto.yml` and a Quarto document with the same name as the project title, `project-title.qmd`:

```{r}
system("cd temp-dirs && quarto create project default project-name project-title")
fs::dir_tree("temp-dirs/project-name")
```

The file `_quarto.yml` is also populated with the project title:

```{r}
#| results: asis
lines <- readLines("temp-dirs/project-name/_quarto.yml")
cat('``` {.yaml filename="_quarto.yml"}\n')
writeLines(lines)
cat('```\n')
```

::: {.callout-caution}

## Don't nest `_quarto.yml` files

Each project should have one, and only one, `_quarto.yml` file. Its location defines the project root for the purpose of `quarto render` and you are likely to get unexpected behaviour if you have a `_quarto.yml` file in a subfolder.

:::

## Render and Preview a Project {#sec-render-a-project}

From the project directory, you can render all the files in the project by rendering without specifying a file:

``` {.bash filename="Terminal"}
quarto render
```

All Quarto documents, with some exceptions as explained in @nte-render-targets below, will be rendered. 

You can also render the contents of a subdirectory of the project by specifying the subdirectory:

``` {.bash filename="Terminal"}
quarto render subdir
```

Or alternatively, from the subdirectory, render without specifying a file:

``` {.bash filename="Terminal"}
cd subdir
quarto render 
```

::: {.callout-note #nte-render-targets}

## What gets rendered?

Quarto will render all valid Quarto input files (e.g. `.qmd`, `.ipynb`, `.md`, `.Rmd` etc.) except files or folders that start with `_`, or `.`, or a file matching `README.*md`. 

All formats specifed in each file will be rendered.

You can also specify exactly what you do and do not want rendered with the `render` key in `_quarto.yml`. See [Render Targets](https://quarto.org/docs/projects/quarto-projects.html#render-targets) in the Quarto documentation for more information.

::: 

To preview a project when using the `default` project type, you must specify a file:

```{.bash filename="Terminal"}
quarto preview index.qmd
```

Quarto will render just enough of the project to display the requested document and open a preview. 
As you interact with the preview, e.g. follow a link in one document to another, Quarto will render any additional files as needed.

## Project Configuration --- `_quarto.yml`

The file `_quarto.yml` provides project configuration. Here's a typical 

Typically it will include project-level options under the `project` key, project options specific to its project type, and document level options common to documents in the project.

```{.yaml filename="_quarto.yml"}


```

If you are curious what a more complicated `_quarto.yml` might look like, you could look at the [`_quarto.yml` for the project that builds this book on GitHub](https://github.com/mine-cetinkaya-rundel/quarto-tdg/blob/main/_quarto.yml).

Anatomy of `_quarto.yml`, project settings, options specific to a project type, options that apply to all formats, format specific options.

### Project Level Options {#sec-project-options}

Project level options are set under the `project` key. You've already seen projects might have a `type` and `title`. 

``` {.yaml filename="_quarto.yml"}
project:
  type: default
  title: Data Exploration 
```

Another commonly set option is `output-dir` which specifes a location for rendered output. 

Without setting `output-dir` outputs are rendered alongside their source documents. 
For example, as you saw in the example in @sec-overview, the output `01-import.html` is rendered in the same location as `01-import.qmd`:

```{r}
dir_tree(dir, recurse = 1)
```

To share results without sharing the source documents, it may be easier to have your outputs in their own directory. 
You could set `output-dir` to `reports`:

```{r}
dir2 <- path("temp-dirs", "ds-project2")
dir_create(dir2, "data")
file_create(dir2, c("data/records.csv", "README.md", "01-import.qmd", "02-visualize.qmd"))
config_path <- file_create(dir2, "_quarto.yml")
write_yaml(list(project = list(`output-dir` = "reports")), config_path)
system("cd temp-dirs/ds-project2 && quarto render")
```

```{r}
#| results: asis
lines <- readLines(config_path)
cat('``` {.yaml filename="_quarto.yml"}\n')
writeLines(lines)
cat('```\n')
```

Now when the project is rendered the output files end up in `reports/` folder:

```{r}
dir_tree(dir2, recurse = 1)
```

The heirachical structure of the project is maintained in the output directory. 
So, if there was another document `provenance.qmd` inside the `data/` folder, it would render to `reports/data/provencance.html`.

You can see other available project options on the [Project Options](https://quarto.org/docs/reference/projects/core.html) reference page in the Quarto documentation.

Some project types also set project-level options under a key that matches their type. 
For instance, when a project is a website, site level settings are set under the `website` key:

``` {.yaml filename="_quarto.yml"}
project:
  type: website

website:
  navbar:
    search: true
```

### Common Metadata {#sec-common-metadata}

Document options, like those you normally set in a YAML header, can also be set in `_quarto.yml`. 
Options set in `_quarto.yml` will be applied to all Quarto files in the project, and reduce repetition by specifying common options in a single location.

As an example, consider a project with two Quarto documents, `01-import.qmd` and `02-visualize.qmd`, where truncated versions are shown below:

::: {layout-ncol="2"}
``` {.markdown filename="01-import.qmd"}
---
title: Data Import and Cleaning
author: Soraya Drake
format:
  html:
    toc: true
    code-fold: true
---

## Import

...
```

``` {.markdown filename="02-visualization.qmd"}
---
title: Exploratory Visualization
author: Soraya Drake
format:
  html:
    toc: true
    code-fold: true
---

## Distributions

...
```
:::

These two documents share common settings in the document YAML: `author`, and the `html` format options `toc` and `code-fold`.
If these options are moved to the file `_quarto.yml`, they will be applied to every Quarto document in the project.
So, if `_quarto.yml` is:

``` {.yaml filename="_quarto.yml"}
project: default

author: Soraya Drake
format: 
  html:
    toc: true
    code-fold: true
```

Then the two documents can have simplified YAML headers that now only need to specify the `title`:

::: {layout-ncol="2"}
``` {.markdown filename="01-import.qmd"}
---
title: Data Import and Cleaning
---

## Import

...
```

``` {.markdown filename="02-visualization.qmd"}
---
title: Exploratory Visualization
---

## Distributions

...
```
:::

As an added advantage, if you add more Quarto documents, you don't need to remember the exact settings you used, and can just let your new document inherit them from `_quarto.yml`.

If a document specifies a different option to `_quarto.yml`, if will override the default value. For instance, if there is another document `03-modelling.qmd` with a different author, specifying `author` in the document YAML will override the value set in `_quarto.yml`:

``` {.markdown filename="03-modelling.qmd"}
---
title: Modelling
author: Aurelius Garcia
---
```

::: {.callout-tip}

## Directory level metadata 

If you would like to specify common metadata for documents inside a sub-directory our your project, you can do so by adding a file called `_metadata.yml` to the sub-directory. Read more in the Quarto Documentation at [Directory Metadata](https://quarto.org/docs/projects/quarto-projects.html#directory-metadata).

:::

Using `_quarto.yml` can help reduce duplication in the metadata of your documents, but once you have related documents in a project, you often also find you have duplicated content. Point at inlcudes in Authoring chapter.

## Tools

### RStudio

**File** > **New Project**: Quarto Project 

(Might need to discuss engine, venv/renv options, or refer to other chapters)

**Build Pane** **Render Project** 

### VS Code

**Quarto: Create Project**

**Quarto: Render Project**

## Advanced: Project Profiles

## Wrapping Up

Virtual Environment -\> Computation chapters

Find yourself creating many projects with the same structure or settings, you might want to define your own custom project type.
See Extensions.


```{r}
dir_delete("temp-dirs")
```