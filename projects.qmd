---
execute:
  echo: false
---

# Projects {#sec-projects}

```{r}
library(fs)
library(quarto)
```

So far, we've concentrated on single Quarto documents: a single `.qmd` which defines all of its Quarto options in its header. In this chapter, you'll learn about Quarto projects: a way to organize collections of Quarto documents. You learn

-   what a Quarto project is
-   how to create one, or turn an existing folder into one
-   how working with a project differs to working with single files
-   how to render all or part of a Quarto project
-   how to set project level Quarto settings
-   how to specify common metadata for documents in the project
-   how to share content across documents in a project

## What is a Quarto Project?

From a technical perspective, a Quarto project is simply a folder that contains the file `_quarto.yml`. From a practical perspective, using a Quarto project has two benefits:

1.  You can easily render all the Quarto documents in the project folder.
2.  You can set options common to the documents in a single place.

Consider the folder `ds-project`, a simple example of a data science project, that contains some Quarto documents:

```{r}
# TODO: prettify output so only see `ds-project` at top, not the full path
# Code to generate a pretty tree
dir <- path(tempdir(), "ds-project")
dir_create(dir, c(NA,"data"))
file_create(dir, c("data/records.csv", "README.md", "01-import.qmd", "02-visualize.qmd"))
dir_tree(dir)
```

To turn this folder into a Quarto project, add the file `_quarto.yml`:

```{r}
file_create(dir, "_quarto.yml")
dir_tree(dir)
```

The presence of `_quarto.yml`, even if empty, signals to Quarto this is a project, and allows you to render without specifying a file:

``` {.bash filename="Terminal"}
quarto render 
```

Quarto will then render all Quarto documents in the project. In this example, the files, `01-import.html` and `02-visualize.html`, and their supporting folders, `01-import_files/` and `02-visualize_files/` are created:

```{r}
#| include: false
quarto_render(dir)
```

```{r}
dir_tree(dir, recurse = 1)
```

You'll learn more about previewing and rendering projects in [Rendering a Project](#render-a-project).

Beyond indicating that the folder is a Quarto project, the file `_quarto.yml` also stores Quarto YAML options. These can be project-level options or document-level options common to the documents in the project. You'll learn more about these

Something here about other role of Something here about specific kinds of project, and `project: default` Something here about general use cases for projects

The file `_quarto.yml` has two roles:

1.  The presence of `_quarto.yml` alerts Quarto that this a project.

2.  The contents of `_quarto.yml` can provide project-level, and document-level YAML options.

`_quarto.yml` contains project level YAML metadata. Some apply to project types. Also specify any document level metadata to apply to all files.

Use cases:

-   A collection of .qmd files that you want to apply the same Quarto format settings too. E.g. homeworks for a specific class (set `author`, `echo`, `pdf: toc` etc). E.g. a series of reports based on same data.

A collection of documents that you naturally render into a single unit, e.g. pages that make up a website, or chapters that make up a book. Quarto has special project types for these examples. You'll learn more about them in the chapters on [Websites](websites.qmd) and [Books](books.qmd).

that contains the yaml

``` yaml
project: default
```

## Create a project

### Empty

``` {.bash filename="Terminal"}
quarto create-project
```

``` {.bash filename="Terminal"}
quarto create project default
```

### Existing

Or add `_quarto.yml` to an existing directory

Examples: websites, book, manuscript

Don't nest `_quarto.yml` files

## Render a Project {#render-a-project}

``` {.bash filename="Terminal"}
quarto render
```

All valid Quarto input files (`.qmd`, `.ipynb`, `.md`, `.Rmd`)

Is everything rendered? Well no, ignores files that start with `_` or `.` and `README.*md`. Also specify exactly what you do and do not want rendered with the `render` key (https://quarto.org/docs/projects/quarto-projects.html#render-targets)

``` {.bash filename="Terminal"}
quarto render directory
```

``` {.bash filename="Terminal"}
cd directory
quarto render 
```

Preview will render just enough of project to display requested doc:

``` {.bash filename="Terminal"}
quarto preview index.qmd
```

But, will generate additional targets as needed (e.g. from following links in preview)

## Project Level Settings

https://quarto.org/docs/reference/projects/core.html

## Common Metadata

Truncated versions of the two Quarto documents, `01-import.qmd` and `02-visualize.qmd`, are shown below:

::: {layout-ncol="2"}
``` {.markdown filename="01-import.qmd"}
---
title: Data Import and Cleaning
author: Soraya Drake
html:
  toc: true
  code-fold: true
---

## Import

...
```

``` {.markdown filename="02-visualization.qmd"}
---
title: Exploratory Visualization
author: Soraya Drake
html:
  toc: true
  code-fold: true
---

## Distributions

...
```
:::

As is often the case for documents that are part of a larger project, these two documents share common settings in the document YAML: `author`, and the `html` format options `toc` and `code-fold`. If these options are moved to the file `_quarto.yml`, they will be applied to every Quarto document in the project. So, if `_quarto.yml` is:

``` {.yaml filename="_quarto.yml"}
project: default

author: Soraya Drake
html:
  toc: true
  code-fold: true
```

Then the two documents can have simplified YAML headers that now only need to specify the `title`:

::: {layout-ncol="2"}
``` {.markdown filename="01-import.qmd"}
---
title: Data Import and Cleaning
---

## Import

...
```

``` {.markdown filename="02-visualization.qmd"}
---
title: Exploratory Visualization
---

## Distributions

...
```
:::

As an added advantage, if you add more Quarto documents, you don't need to remember the exact settings you used, and can just let your new document inherit them from `_quarto.yml`.

Examples of moving document YAML to `_quarto.yml`: simple one reducing repetition, another one where formats are only used in some documents.

`output-dir`, `jupyter`

Directory level metadata `_metadata.yml`

If you are curious what a more complicated `_quarto.yml` might look like, you could look at the [`_quarto.yml` for the project that builds this book on GitHub](https://github.com/mine-cetinkaya-rundel/quarto-tdg/blob/main/_quarto.yml).

Anatomy of `_quarto.yml`, project settings, options specific to a project type, options that apply to all formats, format specific options.

## Common Content

What if I want to reduce repetition of content? `include` shortcode Another way to reduce repetition `include`? Also needs knowledge of `_`

Works outside projects, but commonly turns up once you have more than one Quarto documents and are probably using a project.

## Tools

### RStudio

### VS Code

## Advanced: Project Profiles

## Wrapping Up

Virtual Environment -\> Computation chapters

Find yourself creating many projects with the same structure or settings, you might want to define your own custom project type. See Extensions.

```{r}
dir_delete(dir)
```