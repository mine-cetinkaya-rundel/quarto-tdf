# Publishing {#sec-publishing}

When we talk about *publishing* Quarto documents, we usually mean making the rendered documents available to others via the web.
In this chapter, you'll learn about Quarto's built-in tools for publishing your content.
However, publishing rendered documents to the web isn't the only way to share Quarto documents, so you'll also learn a little about sharing documents in other ways.

## Publishing to the Web

The quickest way to publish a document is via the `quarto publish` command, providing the document filename as an argument:

``` {.bash filename="Terminal"}
quarto publish document.qmd
```

The command will prompt you to select a **Provider**:

```         
? Provider:
❯ Quarto Pub
  GitHub Pages
  Posit Connect
  Netlify
  Confluence
  Hugging Face Spaces
```

You'll learn a bit more about the providers later in this chapter, but let's use Quarto Pub for illustration.

::: callout-tip
[Quarto Pub](https://quartopub.com) is a free service, to follow along, you'll need to [**Sign Up**](https://quartopub.com/sign-up) for an account first.
:::

Quarto will prompt you to authorize your account when you select a Provider for the first time.
This looks different for each provider, but for Quarto Pub, you'll be asked to authorize your account via your default internet browser:

```         
? Provider: › Quarto Pub
? Authorize (Y/n) › 
❯ In order to publish to Quarto Pub you need to authorize your account.
  Please be sure you are logged into the correct Quarto Pub account in your
  default web browser, then press Enter or 'Y' to authorize.
```

Once authorized, Quarto will ask you to confirm the document title.
Then Quarto will render your document one more time, before sending it (and all its required resources) to the Provider.
Once done, a browser will open to view your published content as shown in @fig-quartopub.

![Quarto will open a browser to view the published document. Share the link labeled "Published at".](images/publishing-quartopub.png){#fig-quartopub fig-alt="Screenshot of the site administration view of a published document on Quarto Pubs."}

::: callout-tip
## Your view depends on whether you are logged into Quarto Pub

If you aren't logged in to Quarto Pubs your browser will open to the public URL, rather than the site administration view shown in @fig-quartopub.
:::

Pages published on Quarto Pub have public URLs of the form: `{ username }.quarto.pub/{ document_title }/`.
You can share the URL and anyone can view your rendered content.

## The Publishing Process

The `quarto publish` command relies on local rendering — that is, your Quarto documents are rendered locally on your computer using your local copy of the Quarto CLI. Only the output files are then transferred to the publishing provider.
In @fig-pub-process we illustrate this a two separate steps—render then publish— but they both occur when you run the quarto publish command.

![The `quarto publish` process. Input files are rendered locally, then the output files and their dependencies are transmitted to the publishing provider.](images/publishing-process.jpg){#fig-pub-process fig-alt="A diagram of the publishing process. An arrow labeled Render points from a file with extension .qmd to a collection of files including one with extension .html, a folder labelled _files/ and a file with extension .jpg. An arrow labelled publish points from this collection of files to the same collection of files on quartopub.com."}

Quarto generates a single self-contained output file for some output formats, like PDF or Word documents. 
This single output file is the only thing that needs to be transfered to the provider to share it with others.
However, for some formats, notably HTML, Quarto generates a collection of files and those files might depend on other local files like images. 
All of these files and their dependencies need to be transfered to the provider to successfully publish the content. The advantage of `quarto publish` is that Quarto identifies all these required files for you.

Any computations are also executed locally using your version of knitr or jupyter. 
However, if you use freeze (see @sec-freeze-cache for details) the computations might have been executed elsewhere (or at another time). 

Other publishing models involve local code execution combined with remote rendering, or both remote code execution and remote rendering. 
Remote rendering is particularly useful when it is automated whenever source documents change---a worflow known as Continuous Integration which you'll learn more about in @sec-ci.

## Updating Published Documents

When you use `quarto publish` details about what and where you publish are stored in a file called `_publish.yml`:

``` {.yaml filename="_publish.yml"}
- source: hello.qmd
  quarto-pub:
    - id: 8f059af6-06e1-4594-b7b0-252dab8c0d9e
      url: 'https://quartopub-test.quarto.pub/test'
```

This means when you run `quarto publish` on a document or project a second time, you'll be given the option of using the same details – in effect updating your published content.

The details in `_publish.yml` aren't sensitive (there are no authentication details) so you can check it into version control.

## Publishing Projects

Rather than publishing a single document, you can also publish a Quarto project.
From the project directory, run `quarto publish` without specifying a filename:

``` {.bash filename="Terminal"}
quarto publish
```

Only website, book and manuscript projects can be published this way.

::: callout-tip
If you are trying to publish a project that isn't a website, book or manuscript, consider making it a website.
This only requires adding `type: website` to the `project` key in `_quarto.yml`:

``` {.yaml filename="_quarto.yml"}
project:
  type: website
```

Your rendered files will then be available at corresponding URLs, e.g. a file `report.qmd` in the root of the project directory that renders to PDF will be available at `{{ provider URL }}/report.pdf`.
Adding website navigation is optional, but will generally make things easier to find.
You'll learn more about that in @sec-websites.
:::

## Providers

When you call `quarto publish` you can also specify the provider directly as an argument:

``` {.bash filename="Terminal"}
quarto publish quarto-pub document.qmd
```

Publishing documents other than HTML or PDF

> Documents published to quarto-pub must be either HTML or PDF.

For a single HTML file (including RevealJs presentations) or PDF document, Quarto Pub has the easiest setup.

WHere should I publish:

-   QUarto Pub

-   GitHub PAges

-   Posit Cloud

-   (Cloud Connect)

-   Posit Connect

-   COnfluence

-   

Quarto pub: local render, copy output to quarto.pub

GitHub Pages: local render your content, copy to a special `gh-pages` branch, push that branch to GitHub

Posit Connect: local render, push content to Connect

> GitHub Pages is available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server.
> For more information, see "GitHub’s plans."

## Sharing Documents in Other Ways

Sharing only the `.html`One advantage of `quarto publish` is that it is aware of Quarto document dependencies.
For example, if you shared only the `.html` file generated by Quarto, a viewer missing images that are referenced and HTML or Javascript libraries.

Rendered Quarto documents can be shared in other ways like sending them via email, or putting them in shared drives.
For formats that are self-contained like PDF, Word or Powerpoint documents, share them like you would an document of that for

GitHub - Render to `docs/` and commit.

Considerations for sharing HTML including Reveal.js presentations Word, PDF

`embed-resources`

## Sharing Document Source

Sharing source code: `.qmd` are plain text, put in version control, and share on GitHub e.g.GitHub.
What can/should be in version control?
What should not?

## Continuous Integration

E.g. GitHub actions Delay in depth coverage to Websites chapter?

## Tools

### R

`usethis::use_git()`?
`usethis::use_github()`?

### RStudio

Publish button