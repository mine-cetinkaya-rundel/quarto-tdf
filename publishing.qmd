# Publishing {#sec-publishing}

When we talk about *publishing* Quarto documents, we usually mean making the rendered documents available to others via the web.
In this chapter, you'll learn about Quarto's built-in tools for publishing your content.
However, publishing rendered documents to the web isn't the only way to share Quarto documents, so you'll also learn a little about sharing documents in other ways.

## Publishing to the Web

The quickest way to publish a document is via the `quarto publish` command, providing the document filename as an argument:

``` {.bash filename="Terminal"}
quarto publish document.qmd
```

The command will prompt you to select a **Provider**:

```         
? Provider:
❯ Quarto Pub
  GitHub Pages
  Posit Connect
  Netlify
  Confluence
  Hugging Face Spaces
```

You'll learn a bit more about the providers later in this chapter, but let's use Quarto Pub for illustration.

::: callout-tip
[Quarto Pub](https://quartopub.com) is a free service, to follow along, you'll need to [**Sign Up**](https://quartopub.com/sign-up) for an account first.
:::

Quarto will prompt you to authorize your account when you select a Provider for the first time.
This looks different for each provider, but for Quarto Pub, you'll be asked to authorize your account via your internet browser:

```         
# TO DO: fill in prompt here.
```

Once authorized, Quarto will render your document one more time, before sending it (and all its required resources) to the Provider.
Once done, a browser will open to view your published content.

TODO: Screenshot of the published doc on Quarto Pub, use a document from earlier in the book?

``` {.bash filename=""}
```

When you use `quarto publish` details about what and where you publish are stored in a file called `_publish.yml`:

```{.yaml filename="_publish.yml"}
# TODO: give example here
```

This means when you run `quarto publish` on a document or project a second time, you'll be given the option of using the same details – in effect updating your published content.

You can specify provider as argument:

``` {.bash filename="Terminal"}
quarto publish quarto-pub document.qmd
```

Rather than publishing a single document, you can also publish a Quarto project.
From the project directory, run `quarto publish` without specifying a filename:

```{.bash filename="Terminal"}
quarto publish
```

Only website, book and manuscript projects can be published this way.

::: callout-tip

If you are trying to publish a project that isn't a website, book or manuscript, consider making it a website.
This only requires adding `type: website` to the `project` key in `_quarto.yml`:

```{.yaml filename="_quarto.yml"}
project:
  type: website
```

Your rendered files will then be available at corresponding URLs, e.g. a file `report.qmd` in the root of the project directory that renders to PDF will be available at `{{ provider URL }}/report.pdf`.
Adding website navigation is optional, but will generally make things easier to find. You'll learn more about that in @sec-websites.

::: 

### The Publishing Process

When you run `quarto publish`,

If you find Quarto isn't identifying a file dependency you can also explicitly describe them using the `resources` option to the `html` format.

## Sharing Documents in Other Ways

Sharing only the `.html`One advantage of `quarto publish` is that it is aware of Quarto document dependencies.
For example, if you shared only the `.html` file generated by Quarto, a viewer missing images that are referenced and HTML or Javascript libraries.

The `quarto publish` command relies on local code execution and rendering — that is, your Quarto documents are rendered locally on your computer (using your local copy of the Quarto CLI and any computational dependencies like R or Python).
Other models of publishing involve local code execution but remote rendering, or both remote code execution and rendering.
When remote rendering is automated based on changes to the source documents it is known as Continuous Integration.

![The `quarto publish` process](images/publishing-process.jpg){#fig-pub-process fig-alt="A diagram of the publishing process. An arrow labeled Render points from a file with extension .qmd to a collection of files including one with extension .html, a folder labelled _files/ and a file with extension .jpg. An arrow labelled publish points from this collection of files to the same collection of files on quartopub.com."}

## Providers 

Publishing documents other than HTML or PDF

> Documents published to quarto-pub must be either HTML or PDF.

For a single HTML file (including RevealJs presentations) or PDF document, Quarto Pub has the easiest setup.

WHere should I publish:

-   QUarto Pub

-   GitHub PAges

-   Posit Cloud

-   (Cloud Connect)

-   Posit Connect

-   COnfluence

-   

Quarto pub: local render, copy output to quarto.pub 

GitHub Pages: local render your content, copy to a special `gh-pages` branch, push that branch to GitHub 

Posit Connect: local render, push content to Connect


> GitHub Pages is available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server.
> For more information, see "GitHub’s plans."

## Sharing Documents in Other Ways

Rendered Quarto documents can be shared in other ways like sending them via email, or putting them in shared drives.
For formats that are self-contained like PDF, Word or Powerpoint documents, share them like you would an document of that for

GitHub - Render to `docs/` and commit.

Considerations for sharing HTML including Reveal.js presentations Word, PDF

`embed-resources`

## Sharing Document Source

Sharing source code: `.qmd` are plain text, put in version control, and share on GitHub
e.g.GitHub.
What can/should be in version control?
What should not?

## Continuous Integration

E.g. GitHub actions Delay in depth coverage to Websites chapter?

## Tools

### R

`usethis::use_git()`?
`usethis::use_github()`?

### RStudio

Publish button